import pygame,sys,random
from pygame.locals import *

BOARDWIDTH = 4
BOARDHEIGHT = 4
TILESIZE = 80
WINDOWWIDTH = 640
WINDOWHEIGHT = 480
FPS = 30
BLANK = None
BLACK = (0,0,0)
WHITE = (255,255,255)
BRIGHTBLUE = (0,50,255)
DARKTURQUOISE = (3,54,73)
GREEN = (0,204,0)
BGCOLOR = DARKTURQUOISE
TILECOLOR = GREEN
TEXTCOLOR = WHITE
BORDERCOLOR = BRIGHTBLUE
BASICFONTSIZE = 20
BUTTONCOLOR = WHITE
BUTTONTEXTCOLOR = BLACK
MESSAGECOLOR = WHITE

XMARGIN = int((WINDOWWIDTH-(TILESIZE*BOARDWIDTH+(BOARDWIDTH-1)))/2)
YMARGIN = int((WINDOWHEIGHT-(TILESIZE*BOARDHEIGHT+(BOARDHEIGHT-1)))/2)

UP = 'up'
DOWN = 'down'
LEFT = 'left'
RIGHT = 'right'

def main():
    global FPSCLOCK,DISPLAYSURF,BASICFONT,RESET_SURF,RESET_RECT,NEW_SURF,NEW_RECT,SOLVE_SURF,SOLVE_RECT

    pygame.init()
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH,WINDOWHEIGHT))
    pygame.display.set_caption("Slide Puzzle")
    BASICFONT = pygame.font.Font('freesansbold.ttf',BASICFONTSIZE)
    RESET_SURF, RESET_RECT = makeText('Reset',TEXTCOLOR,TILECOLOR,WINDOWWIDTH - 120, WINDOWHEIGHT - 90)
    NEW_SURF,NEW_RECT = makeText('Reset',TEXTCOLOR,TILECOLOR,WINDOWWIDTH - 120, WINDOWHEIGHT - 60)
    SOLVE_SURF,SOLVE_RECT = makeText('Reset',TEXTCOLOR,TILECOLOR,WINDOWWIDTH - 120, WINDOWHEIGHT - 30)

    mainBoard,solutionSeq = generateNewPuzzle(80)
    SOLVEBOARD = getStartingBoard()
    allMoves = []

    while True:
        slideTo = None
        msg = "Кликни или нажми стрелки для слайда"
        if mainBoard == SOLVEBOARD:
            msg = "Решено"
        drawBoard(mainBoard,msg)

        checkForQuit()
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONUP:
                spotx,spoty = getSpotClicked(mainBoard,event.pos[0],event.pos[1])
                if(spotx,spoty) == (None,None):
                    if RESET_RECT.collidepoint(event.pos):
                        resetAnimation(mainBoard,allMoves)
                        allMoves = []
                    elif NEW_RECT.collidepoint(event.pos):
                        mainBoard,solutionSeq = generateNewPuzzle(80)
                        allMoves = []
                    elif SOLVE_RECT.collidepoint(event.pos):
                        resetAnimation(mainBoard,solutionSeq+allMoves)
                        allMoves = []
