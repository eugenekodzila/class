import os
import sys
import pygame
import random
from pygame import *

pygame.init()

screenSize = (width,heigt) = (600,150)
FPS = 60
gravity = 0.6

black = (0,0,0)
white = (255,255,255)
backgroundColour = (235,235,235)

highScore = 0

screen = pygame.display.set_mode(screenSize)
clock = pygame.time.Clock()
pygame.display.set_caption("Dino Run")

jumpSound = pygame.mixer.Sound('sprites/jump.wav')
dieSound = pygame.mixer.Sound('sprites/die.wav')
checkPointSound = pygame.mixer.Sound('sprites/checkPoint.wav')

def loadImage(
        name,
        sizex = -1,
        sizey = -1,
        colorkey = None,
):
    fullName = os.path.join('sprites',name)
    image = pygame.image.load(fullName)
    image = image.convert()
    if colorkey is not None:
        if colorkey is -1:
            colorkey = image.get_at((0,0))
        image.set_colorkey(colorkey, RLEACCEL)
    if sizex != -1 or sizey != -1:
        image = pygame.transform.scale(image,(sizex,sizey))
    return (image,image.get_rect())

def loadSpriteSheet(
        sheetName,
        nx,
        ny,
        scalex = -1,
        scaley = -1,
        colorkey = None,
):
    fullName = os.path.join('sprites',sheetName)
    sheet = pygame.image.load(fullName)
    sheet = sheet.convert()
    sheetRect = sheet.get_rect()
    sprites = []
    sizex = sheetRect.width/nx
    sizey = sheetRect.height/ny

    for i in range(0,ny):
        for j in range(0,nx):
            rect = pygame.Rect((j*sizex,i*sizey,sizex,sizey))
            image = pygame.Surface(rect.size)
            image = image.convert()
            image.blit(sheet,(0,0),rect)

            if colorkey is not None:
                if colorkey is -1:
                    colorkey = image.get_at((0,0))
                image.set_colorkey(colorkey,RLEACCEL)
            if scalex != -1 or scaley != -1:
                image = pygame.transform.scale(image(scalex,scaley))
            sprites.append(image)
    spriteRect = sprites[0].get_rect()

    return  sprites, spriteRect

def displayGameOverMessage(retButtonImage,gameOverImage):
    retButtonRect = retButtonImage.get_rect()
    retButtonRect.centerx = width / 2
    retButtonRect.top = height * 0.52

    gameOverRect = gameOverImage.get_rect()
    gameOverRect.centerx = width / 2
    gameOverRect.centery = height * 0.35

    screen.blit(retButtonImage,retButtonRect)
    screen.blit(gameOverImage,gameOverRect)

def extractDigits(number):
    if number > -1:
        digits = []
        i = 0
        while(number/10 != 0):
            digits.append(number%10)
            number = int(number/10)

        digits.append(number%10)
        for i in range(len(digits),5):
            digits.append(0)
        digits.reverse()
        return digits

class Dino():
    def __init__(self,sizex=-1,sizey=-1):
        self.images,self.rect = loadSpriteSheet('dino.png',5,1,sizex,sizey,-1)
        self.images1,self.rect1 = loadSpriteSheet('dino_ducking.png',2,1,59,sizey,-1)
        self.rect.bottom = int(0.98*height)
        self.rect.left = width/15
        self.image = self.images[0]
        self.index = 0
        self.counter = 0
        self.score = 0
        self.isJumping = False
        self.isDucking = False
        self.isDead = False
        self.isBlinking = False
        self.movement = [0,0]
        self.jumpSpeed = 11.5

        self.standPosWidth = self.rect.width
        self.duckPosWidth = self.rect1.width

    def draw(self):
        screen.blit(self.image,self.rect)

    def checkBounds(self):
        if self.rect.bottom > int(0.98*height):
            self.rect.bottom = int(0.98*height)
            self.isJumping = False

    def update(self):
        if self.isJumping:
            self.movement[1] = self.movement[1] + gravity

        if self.isJumping:
            self.index = 0
        elif self.isBlinking:
            if self.index == 0:
                if self.counter % 400 == 399:
                    self.index = (self.index + 1)%2
            else:
                if self.counter % 20 == 19:
                    self.index = (self.index + 1)%2
        elif self.isDucking:
            if self.counter % 5 == 0:
                self.index = (self.index + 1) % 2
        else:
            if self.counter % 5 == 0:
                self.index = (self.index + 1) % 2 + 2

        if self.isDead:
            self.index = 4

        if not self.isDucking:
            self.image = self.images[self.index]
            self.rect.width = self.standPosWidth
        else:
            self.image = self.images1[(self.index)%2]
            self.rect.width = self.standPosWidth
        self.rect = self.rect.move(self.movement)
        self.checkBounds()

        if not self.isDead and self.counter % 7 == 6 and self.isBlinking == False:
            self.score += 1
            if self.score % 100 == 0 and self.score != 0:
                if pygame.mixer.get_init() != None:
                    checkPointSound.play()
        self.counter = (self.counter + 1)

class Cactus(pygame.sprite.Sprite):
    def __init__(self,speed=5,sizex=-1,sizey=-1):
        pygame.sprite.Sprite.__init__(self,self.containers)
        self.images,self.rect = loadSpriteSheet('cacti-small.png',3,1,sizex,sizey,-1)
        self.rect.bottom = int(0.98*height)
        self.rect.left = width + self.rect.width
        self.image = self.images[random.randrange(0,3)]
        self.movement = [-1*speed,0]

    def draw(self):
        screen.blit(self.image,self.rect)

    def update(self):
        self.rect = self.rect.move(self.movement)
        if self.rect.right < 0:
            self.kill()

class Ptera(pygame.sprite.Sprite):
    def __init__(self,speed=5,sizex=-1,sizey=-1):
        pygame.sprite.Sprite.__init__(self,self.containers)
        self.images,self.rect = loadSpriteSheet('ptera.png',2,1,sizex,sizey,-1)
        self.pteraHeight = [height*0.82,height*0.75,height*0.60]
        self.rect.centery = self.pteraHeight[random.randrange(0,3)]
        self.rect.left = width + self.rect.width
        self.image = self.images[0]
        self.movement = [-1*speed,0]
        self.index = 0
        self.counter = 0
    def draw(self):
        screen.blit(self.image,self.rect)
    def update(self):
        if self.counter % 10 == 0:
            self.index = (self.index+1)%2
        self.image = self.images[self.index]
        self.rect = self.rect.move(self.movement)
        self.counter = (self.counter + 1)
        if self.rect.right < 0:
            self.kill()




